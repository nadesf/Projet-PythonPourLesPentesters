import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs, unquote
import string, random, base64, re
from colorama import Fore, Style, Back, init

init(autoreset=True)

# Fonction utile 
def get_url_parameters(url):
    parsed_url = urlparse(url)
    query_params = parse_qs(parsed_url.query)
    
    parameters = {}
    for key, value in query_params.items():
        # Si un paramètre a plusieurs valeurs, on le stocke sous forme de liste
        if len(value) > 1:
            parameters[key] = value
        else:
            parameters[key] = value[0]
    
    return parameters

def generate_random_strings(n):
    random_strings = []
    characters = string.ascii_letters + string.digits

    for _ in range(n):
        random_string = ''.join(random.choice(characters) for _ in range(10))
        random_strings.append(random_string)

    return random_strings

def decode_base64(encoded_string):
    try:
        decoded_bytes = base64.b64decode(encoded_string)
        decoded_string = decoded_bytes.decode('utf-8')
        return decoded_string
    except Exception as e:
        return str(e)
    
def not_valid_file(chaine):
    regex = r"^\d+(\.\d+)?[a-zA-Z]$"
    return bool(re.match(regex, chaine))

# Les fonctions pour la détection de vulnérabilité.
def a1_broken_access_control(url):
    try:
        
        full_path = url + "/robots.txt"
        req = requests.get(full_path)
        result = req.text.split("\n")
        disallow_folders = []
        is_vulnerable = False
        print("\n# Liste des répertoires interdit d'accès !\n")
        for line in result:
            if "Disallow" in line:
                folder = line.split(":")[-1].strip()
                if folder != "" and folder != "/":
                    disallow_folders.append(folder)
                    print(line)
        
        # Tentons d'avoir accès au contenu de ces répertoires.
        print("\n# Accès au repertoires interdire")
        for folder in disallow_folders:
            req = requests.get(url+folder)
            if req.status_code == 200:
                is_vulnerable = True
                print(Fore.YELLOW + f"[+] {url+folder} | Status : {req.status_code} | Vulnérable : OUI ")
            else:
                print(Fore.GREEN + f"[+] {url+folder} | Status : {req.status_code} | Vulnérable : NON ")
        
        if is_vulnerable:
            print(Back.RED + "\n[+] VULNERABLE\n")
        else:
            print(Back.GREEN + "\n[+] SECURISE \n")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")
    
def a2_cryptographie_failure(login_url, credentials, target):
    try:
        login = credentials.split(":")[0]
        password = credentials.split(":")[1]
        login_payload = {
            "login": login,
            "password": password,
            "security_level": "0",
            "form": "submit"
        }
        
        is_vulnerable = False
        
        # Effectuer l'authentification 
        with requests.Session() as session:
            login_response = session.post(login_url, data=login_payload)
            # Vérifier si l'authentification a réussi
            if login_response.status_code == 200 and "Welcome" in login_response.text:
                print("Authentification réussie.")
                
                session.get(target)
                print("Récupération du secret chiffré ...")
                secret = session.cookies.get_dict().get("secret")
                if secret:
                    secret = unquote(secret)
                    print("Message chiffré : ", secret)
                    print("Decryptage du secret base64 : ", decode_base64(secret))
                    is_vulnerable = True
                else:
                    is_vulnerable = False
                    
                if is_vulnerable:
                    print(Back.RED + "\n[+] VULNERABLE\n")
                else:
                    print(Back.GREEN + "\n[+] SECURISER \n")
            else:
                print("Echec de l'authentification ...")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")
        
def a3_injection(login_url, credentials, target):
    try:
        login = credentials.split(":")[0]
        password = credentials.split(":")[1]
        login_payload = {
            "login": login,
            "password": password,
            "security_level": "0",
            "form": "submit"
        }
        
        is_vulnerable = False
        
        # Effectuer l'authentification 
        with requests.Session() as session:
            login_response = session.post(login_url, data=login_payload)
            # Vérifier si l'authentification a réussi
            if login_response.status_code == 200 and "Welcome" in login_response.text:
                print("Authentification réussie.")
                parameters = get_url_parameters(target)
                host = target.split("?")[0]
                
                # VULNERABILITE AUX INJECTIONS SQL
                print(Back.WHITE + "\n1. TEST INJECTIONS SQL")
                for key, value in parameters.items():
                    parameters[key] = "'"
                    target_response = session.get(host, params=parameters)
                    # Vérifier si l'accès à la page cible a réussi
                    if "Error: You have an error in your SQL syntax;" in target_response.text:
                        is_vulnerable = True
                        print(Fore.CYAN + f"[+] Le paramètre <<{key}>> est vulnérable aux injections SQL")
                    else:
                        print(Fore.GREEN + f"[-] Le paramètre <<{key}>> n'est vulnérable aux injections SQL") 
                        
                # VULNERABILITE AUX INJECTIONS XSS
                print(Back.WHITE + "\n2. TEST INJECTIONS XSS")
                data = "<script>alert('VULNERABLE AUX INJECTIONS XSS');</script>"
                for key, value in parameters.items():
                    if key != "form":
                        parameters[key] = data
                        target_response = session.get(host, params=parameters)
                        # Vérifier si l'accès à la page cible a réussi
                        if target_response.status_code == 200:
                            soup = BeautifulSoup(target_response.text, "html.parser")
                            vulnerable = soup.find_all('script', string="alert('VULNERABLE AUX INJECTIONS XSS');")
                            if vulnerable:
                                is_vulnerable = True
                                print(Fore.CYAN + f"[+] Le paramètre : <<{key}>> est vulnérable aux injections XSS")
                            else:
                                print(Fore.GREEN + f"[-] Le paramètre : <<{key}>> n'est vulnérable aux injections XSS") 
                        else:
                            print(f"Échec de l'accès à la page cible avec le code d'état {target_response.status_code}.")
                
                # VULNERABILITE AUX INJECTIONS HTML
                print(Back.WHITE + "\n3. TEST INJECTIONS HTML")
                data = "<h1>VULNERABLE AUX INJECTIONS HTML</h1>"
                for key, value in parameters.items():
                    if key != "form":
                        parameters[key] = data
                        target_response = session.get(host, params=parameters)
                
                        # Vérifier si l'accès à la page cible a réussi
                        if target_response.status_code == 200:
                            soup = BeautifulSoup(target_response.text, "html.parser")
                            vulnerable = soup.find_all('h1', string="VULNERABLE AUX INJECTIONS HTML")
                            
                            if vulnerable:
                                is_vulnerable = True
                                print(Fore.CYAN + f"[+] Le paramètre <<{key}>> est vulnérable aux injections HTML")
                            else:
                                print(Fore.GREEN + f"[-] Le paramètre : <<{key}>> n'est vulnérable aux injections HTML") 
                        else:
                            print(f"Échec de l'accès à la page cible avec le code d'état {target_response.status_code}.")
                
                if is_vulnerable:
                    print(Back.RED + "\n[+] VULNERABLE\n")
                else:
                    print(Back.GREEN + "\n[+] SECURISER \n")
            else:
                print("Echec de l'authentification")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")
    
def a4_insure_design(target): 
    try:   
        logins = generate_random_strings(10)
        passwords = generate_random_strings(10)
        
        auth_number = 0
        
        for login in logins:
            for password in passwords:
                login_payload = {
                    "login": login,
                    "password": password,
                    "security_level": "0",
                    "form": "submit"
                }
                login_response = requests.post(target, data=login_payload)
                if login_response.status_code == 200 and "Invalid credentials or user not activated!" in login_response.text:
                    auth_number += 1
        
        if auth_number > 20:
            print(f" {auth_number} tentatives d'authentification réaliser.\n Absence d'un système de défense aux attaques par force brute dû à une mauvaise conception. ")
            print(Back.RED + "\n[+] VULNERABLE !\n")
        else:
            print(Back.GREEN + "\n[+] SECURISE !\n")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")

def a5_security_misconfiguration(target):
    try:
        full_path = target + "/passwords/"
        response = requests.get(full_path)
        
        soup = BeautifulSoup(response.text, "html.parser")
        tds = soup.find_all('td')
        files = []
        for td in tds:
            
            file = td.text
            if "." in file and not not_valid_file(file):
                print(file)
                files.append(file)
        
        vulnerable = False
        for file in files:
            response = requests.get(full_path+file, stream=True)
            if response.status_code == 200:
                with open(file, 'wb') as f:
                    vulnerable = True
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                print(Fore.GREEN + "Téléchargement réussi. Fichier enregistré à :", file)
            else:
                print(f"Échec du téléchargement avec le code d'état {response.status_code}.")
        
        if vulnerable:
            print(Back.RED + "\n[+] VULNERABLE \n")
        else:
            print(Back.GREEN + "\n[+] SECURISE \n")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")

def a6_vulnerable_and_outdated_components():
    pass 

def a7_identification_and_authentification_failures(target, usernames_file, passwords_file):
    
    try:
        with open(usernames_file, "r") as fic:
            logins = fic.readlines()
            
        with open(passwords_file, "r") as fic:
            passwords = fic.readlines()
    except:
        print("le chemin des fichiers est incorrecte ...")
        exit(1)

    try:   
        # Cette variable nous permet de savoir si l'attaque par force brute s'est correctement déroulé.
        auth_number = 0
        
        print("\n")
        for login in logins:
            login = login.replace("\n", "")
            for password in passwords:
                password = password.replace("\n", "")
                login_payload = {
                    "login": login,
                    "password": password,
                    "security_level": "0",
                    "form": "submit"
                }
                login_response = requests.post(target, data=login_payload)
                print(Fore.CYAN + f"Tentatives : {auth_number+1}, login = {login}, password = {password}")
                if login_response.status_code == 200 and "Invalid credentials or user not activated!" in login_response.text:
                    auth_number += 1
        
        
        if auth_number > 2:
            print(Back.RED + "\n[+] VULNERABLE !")
        else:
            print(Back.GREEN + "\n[+] SECURISE !")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")

def a8_software_and_data_integrity_failures(target):
    try:
        full_path = target + "/passwords/"
        response = requests.get(full_path)
        
        soup = BeautifulSoup(response.text, "html.parser")
        tds = soup.find_all('td')
        files = []
        for td in tds:
            
            file = td.text
            if "." in file and not not_valid_file(file):
                print(file)
                files.append(file)
        
        vulnerable = False
        print("\n")
        for file in files:
            response = requests.get(full_path+file, stream=True)
            if response.status_code == 200:
                with open(file, 'wb') as f:
                    vulnerable = True
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                print(Fore.CYAN + "[+] Fichier " + file + "[ OK ]")
            else:
                print(f"Échec du téléchargement avec le code d'état {response.status_code}.")
        
        if vulnerable:
            print(Fore.YELLOW + f"\n [+] Nous avons obtenu l'accès au contenu des fichiers suivant.\n Nous pouvons donc compromètre l'intégrité des fichiers avant de l'uploader à nouveau.")
            print(Back.RED + "\n[+] VULNERABLE")
        else:
            print(Back.GREEN + "\n[+] SECURISE")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")

def a9_security_logging_monitoring_failures(login_url, credentials, target):
    try:
        login = credentials.split(":")[0]
        password = credentials.split(":")[1]
        login_payload = {
            "login": login,
            "password": password,
            "security_level": "0",
            "form": "submit"
        }
        
        is_vulnerable = False
        
        # Effectuer l'authentification 
        with requests.Session() as session:
            login_response = session.post(login_url, data=login_payload)
            # Vérifier si l'authentification a réussi
            if login_response.status_code == 200 and "Welcome" in login_response.text:
                print("Authentification réussie.")
                parameters = get_url_parameters(target)
                host = target.split("?")[0]
                
                # TENTATIVES D'ACCES AUX REPERTOIRES
                print(Fore.YELLOW + "\n1. TENTATIVES D'ACCES AUX REPERTOIRES SYSTEMES")
                for key, value in parameters.items():
                    parameters[key] = "/etc/"
                    target_response = session.get(host, params=parameters)
                    # Vérifier si l'accès à la page cible a réussi
                    if "network" in target_response.text or "os-release" in target_response.text:
                        is_vulnerable = True
                        print(Fore.CYAN + f"[+] Le paramètre <<{key}>> est vulnérable")
                    else:
                        print(Fore.GREEN + f"[-] Le paramètre <<{key}>> n'est vulnérable")
                        
                # TENTATIVES D'ACCES AUX REPERTOIRES
                print(Fore.YELLOW + "\n1. TENTATIVES D'ACCES AUX FICHIERS SYSTEME")
                for key, value in parameters.items():
                    parameters[key] = "/etc/passwd"
                    target_response = session.get(host, params=parameters)
                    # Vérifier si l'accès à la page cible a réussi
                    print()
                    if "root:x:0:0:root:/root:" in target_response.text:
                        is_vulnerable = True
                        print(Fore.CYAN + f"[+] Le paramètre <<{key}>> est vulnérable.")
                    else:
                        print(Fore.GREEN + f"[-] Le paramètre <<{key}>> n'est vulnérable.") 
                
                if is_vulnerable:
                    print(Back.RED + "\n[+] VULNERABLE")
                else:
                    print(Back.GREEN + "\n[+] SECURISER")
            else:
                print("Echec de l'authentification")
    except:
        print(Fore.RED + "\n Une erreur imprévu est survenue lors de la recherche de vulnérabilité.\n Veuillez consulter la documentation pour avoir plus d'informations")

def a10server_side_request_forgery():
    pass